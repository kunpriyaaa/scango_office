// Copyright (c) 2025, kunpriya-natpaphat and contributors
// For license information, please see license.txt

frappe.ui.form.on('Visitor Report', {
    refresh: function(frm) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        frm.add_custom_button('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', function() {
            generate_visitor_report(frm);
        }, 'Actions');
    }
});

function generate_visitor_report(frm) {
    // ‡πÅ‡∏™‡∏î‡∏á loading
    frm.set_value('report_data', '<div class="text-center"><i class="fa fa-spinner fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...</div>');
    frm.refresh_field('report_data');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DocType ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    let possible_doctypes = ['Visitor Management', 'Visitor', 'VisitorManagement', 'Visitor Request'];
    
    check_available_doctype(possible_doctypes, 0, frm);
}

function check_available_doctype(doctypes, index, frm) {
    if (index >= doctypes.length) {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö DocType ‡πÉ‡∏î‡πÄ‡∏•‡∏¢
        frm.set_value('report_data', `
            <div class="alert alert-danger">
                <h5>‡πÑ‡∏°‡πà‡∏û‡∏ö DocType!</h5>
                <p>‡πÑ‡∏°‡πà‡∏û‡∏ö DocType ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</p>
                <small>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${doctypes.join(', ')}</small>
            </div>
        `);
        return;
    }

    let current_doctype = doctypes[index];
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: current_doctype,
            fields: ['name'],
            limit_page_length: 1
        },
        callback: function(r) {
            if (r.message !== undefined) {
                // ‡∏û‡∏ö DocType ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                console.log('Found working DocType:', current_doctype);
                load_visitor_data(frm, current_doctype);
            } else {
                // ‡∏•‡∏≠‡∏á DocType ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                check_available_doctype(doctypes, index + 1, frm);
            }
        },
        error: function() {
            // ‡∏•‡∏≠‡∏á DocType ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            check_available_doctype(doctypes, index + 1, frm);
        }
    });
}

function load_visitor_data(frm, doctype_name) {
    frappe.call({
        method: 'frappe.client.get_list',
        args: {
            doctype: doctype_name,
            filters: get_filters(frm),
            fields: [
                'name', 'visitor_name', 'visitor_phone', 'company', 
                'visit_date', 'visit_time', 'purpose', 'building', 
                'status', 'approved_by', 'check_in_time', 'check_out_time',
                'creation'
            ],
            order_by: 'creation desc',
            limit_page_length: 1000
        },
        callback: function(r) {
            if (r.message) {
                let visitors = r.message;
                frm.set_value('total_visitors', visitors.length);
                
                let html = generate_table_html(visitors, doctype_name);
                frm.set_value('report_data', html);
                frm.set_value('report_status', 'Generated');
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                frappe.show_alert({
                    message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! DocType: ${doctype_name}, ‡∏û‡∏ö ${visitors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
                    indicator: 'green'
                });
                
                frm.save();
            } else {
                frm.set_value('report_data', `
                    <div class="alert alert-info">
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                        <small>DocType: ${doctype_name}</small>
                    </div>
                `);
                frm.set_value('total_visitors', 0);
                frm.set_value('report_status', 'Generated');
            }
        },
        error: function(r) {
            frm.set_value('report_data', `
                <div class="alert alert-danger">
                    <h5>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!</h5>
                    <p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ${doctype_name}</p>
                    <pre>${r.exc || 'Unknown error'}</pre>
                </div>
            `);
            frm.set_value('report_status', 'Error');
        }
    });
}

function get_filters(frm) {
    let filters = {};
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if (frm.doc.date_from && frm.doc.date_to) {
        filters['visit_date'] = ['between', [frm.doc.date_from, frm.doc.date_to]];
    } else if (frm.doc.date_from) {
        filters['visit_date'] = ['>=', frm.doc.date_from];
    } else if (frm.doc.date_to) {
        filters['visit_date'] = ['<=', frm.doc.date_to];
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (frm.doc.status_filter && frm.doc.status_filter !== '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
        filters['status'] = frm.doc.status_filter;
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    if (frm.doc.building_filter) {
        filters['building'] = frm.doc.building_filter;
    }
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏õ‡∏†
    if (frm.doc.security_personnel_filter) {
        filters['approved_by'] = frm.doc.security_personnel_filter;
    }
    return filters;
}

function generate_table_html(visitors, doctype_name) {
    if (!visitors || visitors.length === 0) {
        return `
            <div class="alert alert-info">
                <h5>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</h5>
                <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
                <small>DocType: ${doctype_name}</small>
            </div>
        `;
    }
    
    let html = `
        <div class="mb-2">
            <small class="text-muted">
                üìã DocType: <strong>${doctype_name}</strong> | 
                üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: <strong>${visitors.length}</strong> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ |
                üïê ${new Date().toLocaleString('th-TH')}
            </small>
        </div>
        
        <table class="table table-bordered table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>‡∏£‡∏´‡∏±‡∏™</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</th>
                    <th>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</th>
                    <th>‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</th>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°</th>
                    <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                    <th>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå</th>
                    <th>‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£</th>
                    <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                    <th>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢</th>
                    <th>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤</th>
                    <th>‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    visitors.forEach((visitor, index) => {
        const status_badge = get_status_badge(visitor.status);
        
        html += `
            <tr>
                <td><small>${visitor.name || ''}</small></td>
                <td><strong>${visitor.visitor_name || ''}</strong></td>
                <td>${visitor.visitor_phone || ''}</td>
                <td><small>${visitor.company || ''}</small></td>
                <td><small>${visitor.visit_date || ''}</small></td>
                <td><small>${visitor.visit_time || ''}</small></td>
                <td><small>${visitor.purpose || ''}</small></td>
                <td><small>${visitor.building || ''}</small></td>
                <td>${status_badge}</td>
                <td><small>${visitor.approved_by || ''}</small></td>
                <td><small>${visitor.check_in_time || ''}</small></td>
                <td><small>${visitor.check_out_time || ''}</small></td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
        <div class="mt-2">
            <small class="text-muted">
                üìà ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${visitors.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
            </small>
        </div>
    `;
    
    return html;
}

function get_status_badge(status) {
    if (!status) {
        return "<span class='badge bg-secondary'>-</span>";
    }
        
    const badges = {
        "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥": "<span class='badge bg-warning text-dark'>‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>",
        "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥": "<span class='badge bg-success'>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>",
        "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò": "<span class='badge bg-danger'>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</span>",
        "‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß": "<span class='badge bg-info'>‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß</span>",
        "‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß": "<span class='badge bg-secondary'>‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</span>",
        // English versions
        "Draft": "<span class='badge bg-light text-dark'>Draft</span>",
        "Pending": "<span class='badge bg-warning text-dark'>Pending</span>",
        "Approved": "<span class='badge bg-success'>Approved</span>",
        "Rejected": "<span class='badge bg-danger'>Rejected</span>",
        "Checked In": "<span class='badge bg-info'>Checked In</span>",
        "Checked Out": "<span class='badge bg-secondary'>Checked Out</span>"
    };
    
    return badges[status] || `<span class='badge bg-light text-dark'>${status}</span>`;
}